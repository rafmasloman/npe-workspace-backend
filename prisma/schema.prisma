// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  username String 
  password String @unique
  email String @unique
  fullname String @db.VarChar(100)
  role Role @relation(fields: [roleId], references: [id])
  roleId Int
}

model Role {
  id   Int      @id @default(autoincrement())
  name RoleType @unique
  users User[]
}

model Platform {
  id String @id @default(uuid())
  name String @db.VarChar(100)
  projects PlatformsOnProjects[]
}

model Project {
  id String @id @default(uuid())
  projectName String @db.VarChar(250)
  description String 
  startedDate DateTime @default(now())
  endDate DateTime
  price Int
  client Client @relation(fields: [clientId], references: [id])
  clientId String 
  taskId Int
  task Task @relation(fields: [taskId], references: [id])
  image String
  platform PlatformsOnProjects[]
  members Member[]
}

model Member {
  id String @id @default(uuid())
  name String @db.VarChar(100)
  position String
  phoneNumber String
  profilePicture String
  gender String
  birthDate DateTime
  role RoleType
  task Task?
  payroll Payroll?
  projects Project[]
}

model Client {
  id String @id @default(uuid())
  name String @db.VarChar(100)
  phoneNumber String
  email String
  address String 
  project Project[]
  role RoleType @default(CLIENT)
} 

model Task {
  id Int @id @default(autoincrement())
  name String 
  startedDate DateTime @default(now())
  endDate DateTime
  project Project[]
  assignMember Member @relation(fields: [memberId], references: [id])
  memberId String @unique
}

model Payroll {
  id Int @id @default(autoincrement())
  percent Int
  payment String
  totalPayment Int
  date DateTime @default(now())
  memberId String @unique
  member Member @relation(fields: [memberId], references: [id])
}


model PlatformsOnProjects {
  platform Platform @relation(fields: [platformId], references: [id])
  platformId String
  project Project @relation(fields: [projectId], references: [id])
  projectId String

  @@id([platformId,projectId])
}

enum RoleType {
  ADMIN
  CLIENT 
  STAFF
  PROJECT_MANAGER
}