// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  username String
  password String   @unique
  email    String   @unique
  fullname String   @db.VarChar(100)
  // roleId Int
  // role Role @relation(fields: [roleId], references: [id])
  role     RoleType @default(value: ADMIN)
  memberId String?
  member   Member?
  comments Comment[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

// model Role {
//   id   Int      @id @default(autoincrement())
//   name RoleType @unique
//   users User[]
// }

model Platform {
  id       String                @id @default(uuid())
  name     String                @db.VarChar(100)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Project {
  id          String                @id @default(uuid())
  projectName String                @db.VarChar(250)
  description String
  startedDate DateTime?              @default(now())
  endDate     DateTime?
  price       Int
  task        Task[]
  member Member[]
  clientId  String?
  client    Client?   @relation(fields: [clientId], references: [id])
  image       String?
  projectIcon String?
  platform    String?
  payroll     Payroll[]
  milestone Milestone[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  
}

model Member {
  id             String    @id @default(uuid())
  position       String
  phoneNumber    String
  profilePicture String?
  gender         String
  birthDate      DateTime  @default(now())
  role           RoleType  @default(STAFF)
  userId         String?   @unique
  user           User?     @relation(fields: [userId], references: [id])
  task           Task[]
  payroll        Payroll[]
  project        Project[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Client {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(100)
  phoneNumber String
  address     String
  project     Project[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Comment {
  id Int @id @default(autoincrement())
  message String @db.LongText
  userId String
  user User @relation(fields: [userId], references: [id])
  taskId Int
  task Task @relation(fields: [taskId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Task {
  id        Int       @id @default(autoincrement())
  name      String
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  member    Member[]
  comment Comment[]
  status String
  milestoneId Int?
  milestone Milestone? @relation(fields: [milestoneId], references: [id])
  createdAt DateTime  @default(now())
  endDate   DateTime?
  updatedAt DateTime? @updatedAt
}

model Milestone {
  id Int @id @default(autoincrement())
  milestoneName String
  task Task[]
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])
  startedDate DateTime @default(now())
  endDate DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Payroll {
  id           Int       @id @default(autoincrement())
  percent      Int
  paymentMethod  String
  date         DateTime  @default(now())
  memberId     String    @unique
  member       Member    @relation(fields: [memberId], references: [id])
  projectId    String
  project      Project   @relation(fields: [projectId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}


enum RoleType {
  ADMIN
  STAFF
  PROJECT_MANAGER
}
